#!/usr/bin/python3

import multiprocessing
import os
import shutil
import sys

from multiprocessing.dummy import Pool as ThreadPool

import argparse

parser = argparse.ArgumentParser()
parser.add_argument('-s', '--single_thread', action='store_true')

# Add the first required argument
parser.add_argument('command', type=str, help='The command to run')
parser.add_argument('files', nargs='*', help='The files to run the command on')

args = parser.parse_args()

cols = shutil.get_terminal_size().columns
command = args.command
n_args = len(args.files)
n_cpus = multiprocessing.cpu_count()
# Leave one CPU for doing some other stuff
n_threads = 1 if args.single_thread else n_cpus - 1

if n_args < 1:
    print("I need at least one argument in addition to the command")
    sys.exit(0)

print(
    "Running command "
    + command
    + " on "
    + str(n_args)
    + " arguments with "
    + str(n_threads)
    + " threads"
)

n_complete = 0
n_printed_progress_chars = 0
pool = ThreadPool(n_threads)


def process(the_file):
    global n_complete
    global n_args
    global n_printed_progress_chars
    os.system(command + " \"" + the_file + "\"")
    n_complete += 1
    n_progress_chars = int(float(n_complete) / float(n_args) * cols)
    sys.stdout.write("#" * (n_progress_chars - n_printed_progress_chars))
    sys.stdout.flush()
    n_printed_progress_chars = n_progress_chars

results = pool.map(process, sorted(args.files))
