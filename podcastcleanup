#!/usr/bin/python3

import multiprocessing
import os
import re
import subprocess
import util

HOME = os.path.expanduser("~")

PODCASTS_DIR = os.path.join("mini", "podcasts")
FOLDERS_RAW = sorted([
    os.path.join(HOME, PODCASTS_DIR, d) for d in os.listdir(os.path.join(HOME, PODCASTS_DIR))])
FOLDERS = []
for f in FOLDERS_RAW:
    FOLDERS.append(f[:-1] if f.endswith("/") else f)
DATE_PATTERN = r"^\d\d\d\d\-\d\d\-\d\d"

TAGS_DB = {}
SEEN_DURATIONS = []
SEEN_FP = []
FNULL = open(os.devnull, "w")
OVERRIDE_DATES_CURRENTLY_IN_FILENAME = True

def podcast_hash(the_file):
    return subprocess.check_output(["md5sum", the_file]).decode().split(" ")[0]

def process_id3v2_tags(fp, data):
    if fp in TAGS_DB:
        tags = TAGS_DB[fp]
    else:
        tags = {}
    for l in data.split("\n"):
        if ":" not in l:
            continue
        if " " not in l:
            continue
        tag = l.split(" ", 1)[0]
        if len(tag) != 4:
            continue
        (_, value) = l.split(":", 1)
        tags[tag] = value.strip()
    TAGS_DB[fp] = tags

def process_eyed3_tags(fp, data):
    if fp in TAGS_DB:
        tags = TAGS_DB[fp]
    else:
        tags = {}
    for l in data.split("\n"):
        if ":" not in l:
            continue
        if l.startswith("ID3"):
            continue
        # Workaround for when 'track' and 'genre' are on the same line
        if "track" in l and "genre" in l:
            l = l[:l.index("genre")]
        (tag, value) = l.split(":", 1)
        tags[tag] = value.strip()
    TAGS_DB[fp] = tags

def get_tag_from_cache(fp, tag):
    if fp in TAGS_DB:
        if tag in TAGS_DB[fp]:
            return TAGS_DB[fp][tag]
    return None

def get_tag(e, tag):
    fp = podcast_hash(e)
    # Assume we've retrieved all the tags at once
    if fp in TAGS_DB:
        return get_tag_from_cache(fp, tag)
    try:
	      data = subprocess.check_output(["id3v2", "-l", e]).decode().strip()
    except UnicodeDecodeError:
        print("Decoding error on " + str(e))
        return ""
    if "no id3v2 tags" not in data.lower() and data != "":
        process_id3v2_tags(fp, data)
    data = subprocess.check_output(
        ["eyeD3", "--log-level=critical", e],
        stderr=FNULL).decode().strip()
    process_eyed3_tags(fp, data)
    return get_tag_from_cache(fp, tag)
    #except UnicodeDecodeError:
    # ids = subprocess.check_output(shlex.split("eyeD3 " + e)).decode()
    # if ids:
        # for l in ids.split("\n"):
            # if "title" in l:
                # return l.split(":", 1)[1].strip()

def get_episode_number(e):
    for t in ["TRCK", "track"]:
        candidate = get_tag(e, t)
        if candidate and int(candidate) > 1:
            return str(int(candidate)).zfill(4)
    return None

def get_title(e):
    for t in ["TIT2", "title"]:
        candidate = get_tag(e, t)
        if candidate:
            return candidate
    return "unknown"

def get_date(e):
    y = get_tag(e, "TYER")
    d = get_tag(e, "TDAT")
    if y and d and len(y) == 4 and len(d) == 4:
        m = d[2:]
        d = d[:2]
        return "-".join([y, m, d])
    for t in ["recording date", "release date", "TDAT"]:
        candidate = get_tag(e, t)
        if candidate:
            candidate = candidate.strip()
            if len(candidate) == 4:
                # We just have a year
                return candidate + "-01-01"
            dateparts = candidate.split("-")
            if len(dateparts) != 3:
                return None
            # Reverse the date format.
            date = "-".join([dateparts[2], dateparts[1], dateparts[0]])
            if re.match(DATE_PATTERN, date) is not None:
                return date
    # except UnicodeDecodeError:
        # noop = "hop"
    return None

def get_duration(e):
    duration = "unknown"
    try:
        duration = subprocess.check_output(["mp3info", "-p", "'%m:%s\n'", e]).decode()
        duration = duration.replace("'", "").replace(":", "m").strip()
        duration = [d.zfill(2) for d in duration.split("m")]
    except subprocess.CalledProcessError:
        print("Couldn't get duration for " + e)
    return "m".join(duration)

def process_one_episode(e):
    override_date = OVERRIDE_DATES_CURRENTLY_IN_FILENAME
    date_prefix = util.get_date_prefix()
    # If the file already has a date prefix, we assume it has already been
    # processed, and we skip it.
    if re.match(DATE_PATTERN, e) is not None:
        return ""
    if override_date:
        date = get_date(e)
        if date:
            date_prefix = date
    title = get_title(e)
    duration = get_duration(e)
    episode_number = get_episode_number(e)
    title = util.sanitize_for_filename(title)
    if title.startswith("."):
        title = title[1:]
    fp = podcast_hash(e)
    if duration not in SEEN_DURATIONS:
        SEEN_DURATIONS.append(duration)
    if fp in SEEN_FP:
        cmd = "rm " + e
        os.system(cmd)
    else:
        SEEN_FP.append(fp)
    if episode_number:
        parts = [episode_number]
    else:
        parts = [date_prefix]
    parts.append(title)
    parts.append(duration)
    final_name = "_".join(parts) + ".mp3"
    final_name = util.sanitize_for_filename(final_name)
    if e != final_name:
        cmd = "mv '" + e + "' '" + final_name + "'"
        os.system(cmd)
    return "unused_result"

def keep_only_latest_episode_in_folder_matching_name(name):
    print("Keeping only one in '" + name + "'")
    for f in FOLDERS:
        if name.lower() in f.lower():
            os.chdir(f)
            episodes = sorted([f for f in os.listdir() if f.endswith(".mp3")])
            if len(episodes) > 1:
                cmd = "rm " + " ".join(["'" + e + "'" for e in episodes[:-1]])
                os.system(cmd)
            os.chdir("..")

# Don't use getcwd(), we want to keep symlinks unresolved
CURRENT = os.getenv("PWD")
if CURRENT.endswith("/"):
    CURRENT = CURRENT[:-1]
SINGLE_FOLDER = False
# If we are in a podcast folder, only process this one
if CURRENT in FOLDERS:
    FOLDERS = [CURRENT]
    SINGLE_FOLDER = True
    print("Single folder mode...")
else:
    os.chdir(os.path.join(HOME, PODCASTS_DIR))
    util.run_bin_cmd("sanitizefilenamesrecursively")
    os.system("find . -name '*conflicted*' -delete")
    os.system("find . -size 0 -delete")
    os.system("rm -rf *Conflict*")
    os.system("rm -f .LOG/errors")

for f in FOLDERS:
    if not os.path.exists(f):
        continue
    print(f + "...")
    os.chdir(f)
    episodes = sorted([f for f in os.listdir() if f.endswith(".mp3")])
    n_threads = multiprocessing.cpu_count() - 1
    pool = multiprocessing.Pool(n_threads)
    results = pool.map(process_one_episode, episodes)
    pool.close()
    pool.join()
    os.chdir("..")

if not SINGLE_FOLDER:
    keep_only_latest_episode_in_folder_matching_name("matins_de_france_culture")
    keep_only_latest_episode_in_folder_matching_name("journal_de_7h30")
    keep_only_latest_episode_in_folder_matching_name("NYT_Daily")

for f in FOLDERS:
    if not os.path.exists(f):
        continue
    os.chdir(f)
    episodes = sorted([f for f in os.listdir() if f.endswith(".mp3")])
    os.chdir("..")
    if len(episodes) == 0:
        os.system("rmdir '" + f + "'")

if not SINGLE_FOLDER:
    os.chdir(".LOG")
    log_files = os.listdir(".")
    for l in log_files:
        if "conflict" in l:
            os.system('rm "' + l + '"')
    os.chdir("..")

print("Removing backups...")
os.system("find -name '*.bup' -delete")
# Remove down-sampling for now, creating more issues than it's worth
#print("Down-sampling...")
#os.system("downsampleallmp3srecursively 64")
#print("Removing backups again...")
#os.system("find -name '*.bup' -delete")
print("All done.")
