#!/usr/bin/python3

import multiprocessing
import os
import re
import subprocess
import sys


from multiprocessing.dummy import Pool as ThreadPool

n_cpus = multiprocessing.cpu_count()
# Leave one CPU for doing some other stuff
n_threads = n_cpus - 1

if len(sys.argv) < 2:
    print("Usage: " + sys.argv[0] + " target_bitrate")
    sys.exit(1)

target = int(sys.argv[1])


def reencode(mp3):
    print("Reencoding " + mp3 + "...")
    bup = mp3.replace(".mp3", ".mp3.bup")
    os.system("mv " + mp3 + " " + bup)
    os.system("lame --mp3input --quiet -b " + str(target) + " " + bup + " " + mp3)
    # os.system("rm " + bup)


pool = ThreadPool(n_threads)
files_to_reencode = []

for root, dirs, files in os.walk("."):
    for file in sorted(files):
        if file.endswith(".mp3"):
            file_output = subprocess.check_output(
                ["file", os.path.join(root, file)]
            ).decode()
            if "kbps" in file_output:
                groups = re.search("(\d+) kbps,", file_output)
                if groups is not None:
                    rate = int(groups.group(1))
                    if rate > target:
                        files_to_reencode.append(os.path.join(root, file))
            else:
                files_to_reencode.append(os.path.join(root, file))

print(
    "Reencoding "
    + str(len(files_to_reencode))
    + " files with "
    + str(n_threads)
    + " threads..."
)

results = pool.map(reencode, files_to_reencode)
