#!/usr/bin/python3

import multiprocessing
import os
import sys

from multiprocessing.dummy import Pool as ThreadPool

import util

if len(sys.argv) < 2:
    print("Please give me the replacement pattern as an argument")
    sys.exit(1)

patt = sys.argv[1]
extensions = sys.argv[2:] if len(sys.argv) > 2 else None
ignored_extensions = ["jpg", "png"]

n_cpus = multiprocessing.cpu_count()
# Leave one CPU for doing some other stuff
n_threads = n_cpus - 1
pool = ThreadPool(n_threads)
is_mac = util.is_mac()

def process(one_file):
    # TODO: Give an idea of progress on the whole file set.
    global is_mac
    sys.stderr.write(".")
    sys.stderr.flush()
    main_cmd = 'sed -I ""' if is_mac else "sed -i"
    cmd = main_cmd + ' "' + patt + '" ' + one_file
    # print(cmd)
    os.system(cmd)


files_to_process = []
for path, dirs, filenames in os.walk(os.getcwd()):
    filenames = [f for f in filenames if not f[0] == '.']
    dirs[:] = [d for d in dirs if not d[0] == '.']

    if path.startswith("."):
        continue
    for f in filenames:
        should_proceed = False
        if not extensions:
            should_proceed = True
        else:
            for e in extensions:
                if f.endswith(e):
                    should_proceed = True
                    break
        for e in ignored_extensions:
            if f.endswith(e):
                should_proceed = False
                break
        if should_proceed:
            f_full = os.path.join(path, f)
            if not os.path.exists(f_full):
                print(f_full + " doesn't seem to exist, skipping")
                continue
            files_to_process.append(f_full)

results = pool.map(process, files_to_process)
