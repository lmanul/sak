#!/usr/bin/python3

import mailbox
import os
import sys

def is_mail_dir(d):
    expected = ["cur", "new", "tmp"]
    subdirs = os.listdir(d)
    has_all_expected = True
    if len(subdirs) == 0:
        return False

    for s in ["cur", "new", "tmp"]:
        if s not in subdirs:
            has_all_expected = False
            break
    if subdirs[0] in expected and not has_all_expected:
        print("'" + d + "' has some of the expected dirs, but not all: "
              "" + str(subdirs))
    return has_all_expected

def maildir_for_single_mail(mail_path):
    path_parts = mail_path.split(os.sep)
    current_path = os.sep.join(path_parts[:-1])
    i = 1
    while i < len(path_parts):
        current_path = os.sep.join(path_parts[:-i])
        if len(current_path) == 0:
            return None
        if is_mail_dir(current_path):
            return mailbox.Maildir(current_path, factory=None)
        i += 1
    return None

def get_single_mail_object(maildir, mail_path):
    look_for = mail_path.split("/")[-1].split(":")[0]
    print("Look for " + look_for)
    for key in maildir.iterkeys():
        if key == look_for:
            return (key, maildir[key])
    print("I couldn't find mail " + mail_path + " in " + str(maildir))
    return (None, None)

def detach_from_mail_in_maildir(mail, key, maildir, out_path_prefix):
    print("Detaching attachments...")
    maildir.lock()
    try:
        for message_part in mail.walk():
            main_type = message_part.get_content_maintype()
            print("Found type " + main_type)
            if main_type in ["text", "multipart"]:
                continue
            attachment_filename = message_part.get_filename()
            if attachment_filename:
                output_path = os.path.join(out_path_prefix, attachment_filename)
                print("Saving attachment to '" + output_path + "'...")
                with open(output_path, "wb") as f:
                    f.write(message_part.get_payload(decode = 1))
                    f.close()
            print("Removing original attachment...")
            for k in message_part.keys():
                message_part.__delitem__(k)
            message_part.set_payload("Detached with 'maildetach'")
            message_part.set_param('Content-Type', 'text/html; charset=ISO-8859-1')
            message_part.set_param('Content-Disposition', 'inline')
            maildir.__setitem__(key, mail)
        maildir.flush()
    finally:
        maildir.unlock()
        maildir.close()

if __name__ == "__main__":
    IN_MAIL_PATH = os.path.join(os.getcwd(), sys.argv[1])
    MAILDIR = maildir_for_single_mail(IN_MAIL_PATH)
    if not MAILDIR:
        print("I couldn't find a 'mail dir' owning:\n\n\t" + IN_MAIL_PATH + "\n\n"
              "Are you sure the 'cur', 'new', 'tmp' subfolders are present?")
        sys.exit(1)
    (KEY, MAIL) = get_single_mail_object(MAILDIR, IN_MAIL_PATH)
    if not MAIL:
        print("I couldn't find the given mail in the 'mail dir' that should "
              "contain it.")
        sys.exit(1)
    detach_from_mail_in_maildir(MAIL, KEY, MAILDIR, os.getcwd())
