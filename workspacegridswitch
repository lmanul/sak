#!/usr/bin/python

import os
import sys
import util

import windowmanager

from virtualdesktops import ARABIC, ROMAN, CHINESE, DEVANAGARI, THAI

DEBUG = True

N_ROWS = 3
N_COLS = 3
SQUARE = N_COLS * N_ROWS

ARABIC_NUMERALS = ARABIC.split(" ")
ROMAN_NUMERALS = ROMAN.split(" ")
CHINESE_NUMERALS = CHINESE.split(" ")
DEVANAGARI_NUMERALS = DEVANAGARI.split(" ")
THAI_NUMERALS = THAI.split(" ")

ALL_NUMERALS = [
    ARABIC_NUMERALS, ROMAN_NUMERALS, CHINESE_NUMERALS, DEVANAGARI_NUMERALS, THAI_NUMERALS
]

def debug(msg):
    if DEBUG:
        print(msg)

def log_time(start, message="Time"):
    if DEBUG:
        util.log_time(start, message)

def switch(current, target):
    start = util.current_time_milliseconds()
    principal = 0
    while current > SQUARE:
        current -= SQUARE
        principal += 1
    workspace_to_refocus_at_the_end = target + principal * SQUARE
    focused_monitor = windowmanager.get_focused_monitor()
    log_time(start, "Got focused monitor")
    debug("Initial focused monitor " + str(focused_monitor))
    monitor_ids = windowmanager.get_monitor_ids()
    log_time(start, "Got monitor IDs")
    i = 0
    for monitor_id in monitor_ids:
        debug("Monitor " + monitor_id)
        if windowmanager.is_bspwm():
            target_ws_id = ALL_NUMERALS[i % len(ALL_NUMERALS)][target - 1]
        elif windowmanager.is_hyprland():
            target_ws_id = str(target + N_COLS * N_ROWS * i)
        else:
            target_ws_id = str(target)
        debug("\tFocusing workspace " + str(target_ws_id))
        if not windowmanager.is_hyprland():
            # On Hyprland, a workspace is attached to a monitor, no need to
            # explicitly focus the monitor.
            windowmanager.focus_monitor_with_id(monitor_id)
        windowmanager.focus_workspace_with_name(target_ws_id)
        last_requested_ws = target_ws_id
        i += 1
    if last_requested_ws != workspace_to_refocus_at_the_end:
        debug("Refocusing workspace " + str(workspace_to_refocus_at_the_end))
        windowmanager.focus_workspace_with_name(workspace_to_refocus_at_the_end)
        log_time(start, "Focused ws with name")

    # Restore focused monitor
    debug("Refocusing monitor " + str(focused_monitor))
    windowmanager.focus_monitor_with_id(focused_monitor)
    windowmanager.move_mouse_to_center_of_monitor(focused_monitor)
    icon_filename = (
        "workspace_"
        "" + str(N_ROWS) + "x"
        "" + str(N_COLS) + "_"
        "" + str(target) + ""
        ".svg"
    )
    icon_path = os.path.join(os.path.expanduser("~"), "bus", "reference", "workspace_icons",
        icon_filename)
    windowmanager.notify(" ", icon_path)

def switch_with_direction(current, direction):
    start = util.current_time_milliseconds()
    last_requested_ws = current
    debug("Current workspace " + str(current) + ", going in direction " + direction)
    # Always synchronize monitors, but remember which one was active originally
    principal = 0
    while current > SQUARE:
        current -= SQUARE
        principal += 1
    target = windowmanager.select_target_workspace(N_ROWS, N_COLS, current, direction)
    log_time(start, "Selected target ws")
    while target > SQUARE:
        target -= SQUARE
    debug("Target is " + str(target))
    debug("Principal " + str(principal) + ", square " + str(SQUARE))
    switch(current, target)
    log_time(start, "Switched")

def switch_to_primary_target(current, primary_target):
    # We are 1-based
    assert primary_target <= SQUARE
    switch(current, primary_target)

#    if target != current:

if __name__ == "__main__":
    start = util.current_time_milliseconds()
    CURRENT = windowmanager.get_focused_workspace_name()
    log_time(start, "Got focused ws name")
    if CURRENT in ROMAN_NUMERALS:
        CURRENT = ROMAN_NUMERALS.index(CURRENT) + 1
    if CURRENT in CHINESE_NUMERALS:
        CURRENT = CHINESE_NUMERALS.index(CURRENT) + 1
    current = int(CURRENT)
    if sys.argv[1] in ["l", "r", "u", "d"]:
        switch_with_direction(current, sys.argv[1])
        log_time(start, "Switched with direction")
    else:
        switch_to_primary_target(current, int(sys.argv[1]))
        log_time(start, "Switched to primary target")
    end = util.current_time_milliseconds()
    log_time(start, "Done")
