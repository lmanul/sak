#!/usr/bin/python

import curses

class TableCurse:
    def __init__(self):
        self.current_row = 0
        self.current_col = 0
        self.cursor_x = 0
        self.cursor_y = 0
        self.draw_r = 0
        self.draw_c = 0
        self.data = [["Type here"]]
        self.position_cursor_at_end_of_cell(self.current_row, self.current_col)

    def add_col(self):
        "Append a column"
        for i in range(len(self.data)):
            self.data[i].append("")
        self.current_col = len(self.data[0]) - 1
        self.position_cursor_at_end_of_cell(
            self.current_row, self.current_col)

    def add_row(self):
        "Append a row"
        new_row = []
        for i in range(len(self.data[0])):
            new_row.append("")
        self.data.append(new_row)
        self.current_row += 1
        self.current_col = 0
        self.position_cursor_at_end_of_cell(
            self.current_row, self.current_col)

    def get_position_within_current_cell(self):
        pos = self.cursor_x
        for col in range(self.current_col):
            pos -= self.get_col_width(col) + 2 # Space
        pos -= self.current_col + 1 # Separators
        return pos - 1

    def backspace(self):
        "Backspace in the current cell"
        value = self.data[self.current_row][self.current_col]
        pos = self.get_position_within_current_cell()
        if len(value) > 0:
            self.data[self.current_row][self.current_col] = value[:pos - 1] + value[pos:]
            self.cursor_x -= 1

    def input_char(self, char):
        "Input a character in the current cell"
        curr = self.data[self.current_row][self.current_col]
        pos = self.get_position_within_current_cell()
        self.data[self.current_row][self.current_col] = curr[:pos] + char + curr[pos:]
        self.cursor_x += 1

    def get_width_for_row(self, arr):
        "Get the char width of the given row"
        w = 0
        for cell in arr:
            w += len(cell) + 2 # Spaces
        w += len(arr) + 1 # Separators
        return w

    def get_total_width(self):
        "Get the width of the whole table, including separator"
        w = 0
        n_cols = len(self.data[0])
        for col in range(n_cols):
            w += self.get_col_width(col)
        w += n_cols + 1 # Separators
        w += 2 * n_cols # Spaces
        return w

    def draw_horizontal_separator(self, screen):
        "Adds a horizontal line as separator between rows"
        screen.addstr(self.draw_r, self.draw_c,
            "+" + ("-" * (self.get_total_width() - 2)) + "+")
        self.draw_r += 1
        self.draw_c = 0

    def position_cursor_at_end_of_cell(self, row, col):
        "Places the cursor at the end of the text in this cell"
        y = 1 + 2 * row
        x = 0
        for c in range(col):
            x += self.get_col_width(c) + 2 # Spaces
        x += col + 1 # Separators
        x += len(self.data[row][col])
        x += 1 # Just after last letter
        self.cursor_x = x
        self.cursor_y = y

    def get_col_width(self, col):
        w = 0
        for row in range(len(self.data)):
            w = max(w, len(self.data[row][col]))
        return w

    def draw_cell(self, screen, row, col):
        cell_width = self.get_col_width(col)
        screen.addstr(self.draw_r, self.draw_c, self.data[row][col])
        self.draw_c += cell_width

    def update_current_cell(self):
        "Potentially update the current cell depending on cursor location"
        if self.cursor_y % 2 == 0:
            # We're on a divider
            return
        self.current_row = int((self.cursor_y -1 ) / 2)

        x = 2
        col = 0
        while x <= self.cursor_x:
            x += self.get_col_width(col) + 3 # Spaces + separator
            col += 1
        self.current_col = col - 1

    def draw(self, screen):
        "Renders the table"
        self.draw_c = 0
        self.draw_r = 0
        self.draw_horizontal_separator(screen)

        for row in range(len(self.data)):
            screen.addstr(self.draw_r, self.draw_c, "|")
            self.draw_c += 1
            for col in range(len(self.data[row])):
                screen.addstr(self.draw_r, self.draw_c, " ")
                self.draw_c += 1
                self.draw_cell(screen, row, col)
                screen.addstr(self.draw_r, self.draw_c, " |")
                self.draw_c += 2
            self.draw_r += 1
            self.draw_c = 0
            self.draw_horizontal_separator(screen)

table_curse = TableCurse()

def draw_menu(screen):
    global table_curse
    quit = False
    k = 0

    # Clear and refresh the screen for a blank canvas
    screen.clear()
    screen.refresh()

    # Start colors in curses
    curses.start_color()
    curses.init_pair(1, curses.COLOR_CYAN, curses.COLOR_BLACK)
    curses.init_pair(2, curses.COLOR_RED, curses.COLOR_BLACK)
    curses.init_pair(3, curses.COLOR_BLACK, curses.COLOR_WHITE)

    while not quit:

        # Initialization
        screen.clear()
        height, width = screen.getmaxyx()

        # Left alt + q
        if k == 113:
            quit = True
            break
        if k == ord('|'):
            table_curse.add_col()
        elif k == ord('+'):
            table_curse.add_row()
        elif k == 263:
            table_curse.backspace()
        elif k == curses.KEY_DOWN:
            table_curse.cursor_y += 1
        elif k == curses.KEY_UP:
            table_curse.cursor_y -= 1
        elif k == curses.KEY_RIGHT:
            table_curse.cursor_x += 1
        elif k == curses.KEY_LEFT:
            table_curse.cursor_x -= 1
        elif k:
            table_curse.input_char(chr(k))

        table_curse.cursor_x = max(0, table_curse.cursor_x)
        table_curse.cursor_x = min(width-1, table_curse.cursor_x)

        table_curse.cursor_y = max(0, table_curse.cursor_y)
        table_curse.cursor_y = min(height-1, table_curse.cursor_y)

        table_curse.update_current_cell()

        statusbarstr = "'Alt-q' to exit | Row {}/{} Col {}/{} | Last key: {}".format(
            table_curse.current_row + 1, len(table_curse.data),
            table_curse.current_col + 1, len(table_curse.data[0]), k)

        table_curse.draw(screen)

        # Render status bar
        screen.attron(curses.color_pair(3))
        screen.addstr(height-1, 0, statusbarstr)
        screen.addstr(height-1, len(statusbarstr), " " * (width - len(statusbarstr) - 1))
        screen.attroff(curses.color_pair(3))

        screen.move(table_curse.cursor_y, table_curse.cursor_x)

        # Refresh the screen
        screen.refresh()

        # Wait for next input
        k = screen.getch()

def main():
    curses.wrapper(draw_menu)

if __name__ == "__main__":
    main()
