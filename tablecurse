#!/usr/bin/python

import curses

class TableCurse:
    def __init__(self):
        self.current_row = 0
        self.current_col = 0
        self.cursor_x = 0
        self.cursor_y = 0
        self.draw_r = 0
        self.draw_c = 0
        self.data = [["Type here"]]
        self.position_cursor_at_end_of_cell(self.current_row, self.current_col)

    def add_col(self):
        for i in range(len(self.data)):
            self.data[i].append("")
        self.current_col = len(self.data[0]) - 1
        self.position_cursor_at_end_of_cell(
            self.current_row, self.current_col)

    def add_row(self):
        new_row = []
        for i in range(len(self.data[0])):
            new_row.append("")
        self.data.append(new_row)
        self.current_row += 1
        self.current_col = 0
        self.position_cursor_at_end_of_cell(
            self.current_row, self.current_col)

    def backspace(self):
        if len(self.data[self.current_row][self.current_col]) > 0:
            self.data[self.current_row][self.current_col] = self.data[self.current_row][self.current_col][:-1]
            self.cursor_x -= 1

    def input_char(self, char):
        self.data[self.current_row][self.current_col] += char
        self.cursor_x += 1

    def get_width_for_row(self, arr):
        w = 0
        for cell in arr:
            w += len(cell) + 2 # Spaces
        w += len(arr) + 1 # Separators
        return w

    def get_max_width(self):
        w = 0
        for row in self.data:
            w = max(w, self.get_width_for_row(row))
        return w

    def draw_horizontal_separator(self, screen, r, c):
        screen.addstr(r, c, "-" * self.get_max_width())

    def position_cursor_at_end_of_cell(self, row, col):
        y = 1 + 2 * row
        x = 0
        for c in range(col):
            x += len(self.data[row][c]) + 2 # Spaces
        x += col + 1 # Separators
        x += len(self.data[row][col])
        x += 1 # Just after last letter
        self.cursor_x = x
        self.cursor_y = y

    def draw(self, screen):
        self.draw_c = 0
        self.draw_r = 0
        self.draw_horizontal_separator(screen, self.draw_r, self.draw_c)
        self.draw_r += 1
        self.draw_c = 0

        for row in range(len(self.data)):
            screen.addstr(self.draw_r, self.draw_c, "|")
            self.draw_c += 1
            for col in range(len(self.data[row])):
                screen.addstr(self.draw_r, self.draw_c, " ")
                self.draw_c += 1
                screen.addstr(self.draw_r, self.draw_c, self.data[row][col])
                self.draw_c += len(self.data[row][col])
                screen.addstr(self.draw_r, self.draw_c, " |")
            self.draw_r += 1
            self.draw_c = 0
            self.draw_horizontal_separator(screen, self.draw_r, self.draw_c)
            self.draw_r += 1
            self.draw_c = 0

table_curse = TableCurse()


def draw_menu(screen):
    global table_curse
    quit = False
    k = 0

    # Clear and refresh the screen for a blank canvas
    screen.clear()
    screen.refresh()

    # Start colors in curses
    curses.start_color()
    curses.init_pair(1, curses.COLOR_CYAN, curses.COLOR_BLACK)
    curses.init_pair(2, curses.COLOR_RED, curses.COLOR_BLACK)
    curses.init_pair(3, curses.COLOR_BLACK, curses.COLOR_WHITE)

    while not quit:

        # Initialization
        screen.clear()
        height, width = screen.getmaxyx()

        # Left alt + q
        if k == 113:
            quit = True
            break
        if k == ord('|'):
            table_curse.add_col()
        elif k == ord('+'):
            table_curse.add_row()
        elif k == 263:
            table_curse.backspace()
        elif k == curses.KEY_DOWN:
            table_curse.cursor_y += 1
        elif k == curses.KEY_UP:
            table_curse.cursor_y -= 1
        elif k == curses.KEY_RIGHT:
            table_curse.cursor_x += 1
        elif k == curses.KEY_LEFT:
            table_curse.cursor_x -= 1
        elif k:
            table_curse.input_char(chr(k))

        table_curse.cursor_x = max(0, table_curse.cursor_x)
        table_curse.cursor_x = min(width-1, table_curse.cursor_x)

        table_curse.cursor_y = max(0, table_curse.cursor_y)
        table_curse.cursor_y = min(height-1, table_curse.cursor_y)

        statusbarstr = "'Alt-q' to exit | Pos: {}, {} | Last key: {}".format(
            table_curse.cursor_x, table_curse.cursor_y, k)

        table_curse.draw(screen)

        # Render status bar
        screen.attron(curses.color_pair(3))
        screen.addstr(height-1, 0, statusbarstr)
        screen.addstr(height-1, len(statusbarstr), " " * (width - len(statusbarstr) - 1))
        screen.attroff(curses.color_pair(3))

        screen.move(table_curse.cursor_y, table_curse.cursor_x)

        # Refresh the screen
        screen.refresh()

        # Wait for next input
        k = screen.getch()

def main():
    curses.wrapper(draw_menu)

if __name__ == "__main__":
    main()
